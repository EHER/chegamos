<?php

namespace app\models;

use lithium\util\Inflector;

/**
 * Test class for City.
 * Generated by PHPUnit on 2010-11-30 at 17:45:44.
 */
class CityTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var City
	 */
	protected $object;

	protected function setUp() {
		$this->object = new City;
	}

	protected function tearDown() {
		unset($this->object);
	}

	public function testPopulate() {
		$data = new \stdClass();
		$data->name = 'City';
		$data->state = 'State';
		$data->country = 'Country';

		$this->object->populate($data);

		$this->assertEquals('City', $this->object->getName());
		$this->assertEquals('State', $this->object->getState());
		$this->assertEquals('Country', $this->object->getCountry());
	}

	public function testPopulateWithoutData() {
		$data = new \stdClass();

		$this->object->populate($data);

		$this->assertEquals('', $this->object->getName());
		$this->assertEquals('', $this->object->getState());
		$this->assertEquals('', $this->object->getCountry());
	}

	public function testPopulateWithDataNull() {
		$data = null;

		$this->object->populate($data);

		$this->assertEquals('', $this->object->getName());
		$this->assertEquals('', $this->object->getState());
		$this->assertEquals('', $this->object->getCountry());
	}

	public function testPopulateWithDataZero() {
		$data = 0;

		$this->object->populate($data);

		$this->assertEquals('', $this->object->getName());
		$this->assertEquals('', $this->object->getState());
		$this->assertEquals('', $this->object->getCountry());
	}

	public function testPopulateWithStringData() {
		$data = "NewData";

		$this->object->populate($data);

		$this->assertEquals('', $this->object->getName());
		$this->assertEquals('', $this->object->getState());
		$this->assertEquals('', $this->object->getCountry());
	}

	public function testPopulateWithArrayData() {
		$data = array(
			'City'=>'City',
			'State'=>'State',
			'Country'=>'Country'
			);

		$this->object->populate($data);

		$this->assertEquals('', $this->object->getName());
		$this->assertEquals('', $this->object->getState());
		$this->assertEquals('', $this->object->getCountry());
	}

	public function test__toString() {
		$this->object->setFormatter(New Inflector());
		$this->object->setName('city');
		$this->assertEquals('City', (string) $this->object);
		$this->object->setName('CITY');
		$this->assertEquals('City', (string) $this->object);
	}

	public function testSetGetCountry() {
		$this->object->setCountry('country');
		$this->assertEquals('country', $this->object->getCountry());
		$this->object->setCountry('Country');
		$this->assertEquals('Country', $this->object->getCountry());
	}

	public function testSetGetState() {
		$this->object->setState('state');
		$this->assertEquals('state', $this->object->getState());
		$this->object->setState('State');
		$this->assertEquals('State', $this->object->getState());
	}

	public function testSetGetName() {
		$this->object->setName('city');
		$this->assertEquals('city', $this->object->getName());
		$this->object->setName('City');
		$this->assertEquals('City', $this->object->getName());
	}

}
